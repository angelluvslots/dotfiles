# font from nerdfonts.com required

print_info() {
    prin " "
    prin " "
    prin " "
    prin " "
	
	info topbar
	
    info "\e[m " title
	prin "\e[m \e[m \e[36m " "NixOs"
	info "\e[m \e[m  \e[34m " term
	info "\e[m \e[m  \e[35m󰍹 " de
	info "\e[m \e[m  \e[33m " cpu
	info "\e[m \e[m  \e[32m " gpu
	
	info bottombar
}

# custom configs
battery_name="BAT0"

# neofetch configs
os_arch="off"
package_managers="tiny"
gap=1
separator="\n"
#uptime_shorthand="tiny"
ascii_bold="off"

# battery bar
bar_char_elapsed="󰨓"
bar_char_total="󰨔"

bar_border="off"
bar_length=20

# custom battery bar (Linux only)
get_topbar() {
    bat="/sys/class/power_supply/${battery_name}"
    capacity="$(< "${bat}/capacity")"
    status="$(< "${bat}/status")"
    if [[ "$capacity" ]]; then
        original_elapsed=${bar_color_elapsed}
        original_total=${bar_color_total}

        case "$status" in
            "Charging")
                bar_color_total=$(color 3)
                bar_color_elapsed=$(color 3)

                battery_indicator="󱐋"
                ;;

            "Full" | "Not charging")
                bar_color_total=$(color 12)
                bar_color_elapsed=$(color 12)

                battery_indicator="󰚥"
                ;;

            "Discharging")
                bar_color_total=$(color 7)
                battery_indicator="$(color 15)󰧟" # 

                if (( capacity < 10 )); then
        	    bar_color_total=$(color 1)
                    bar_color_elapsed=$(color 1)

                    battery_indicator=""

                elif (( capacity < 20 )); then
                    bar_color_elapsed=$(color 1)

                elif (( capacity < 30 )); then
                    bar_color_elapsed=$(color 3)

                else
                    bar_color_elapsed=$(color 2)

                fi
                ;;
        esac

        # round battery to nearest 10 for printing
        capacity=$(( (capacity + 5) / 10 * 10 ))

        battery="$(bar "$capacity" 100)"
        prin "╭${battery}${battery_indicator}\e[m─────────────────╮"

        bar_color_elapsed=${original_elapsed}
        bar_color_total=${original_total}

    else
        prin "╭ $(color 1)ʙᴀᴛᴛᴇʀʏ ᴇʀʀᴏʀ\e[m ─────────────╮"
    fi
}

# custom color bar
get_bottombar() {
    prin "╰──────────────────────────────────────╯"
}

# custom ascii
get_distro_ascii() {
    set_colors 6 2 3
    read -rd '' ascii_data << 'EOF'
${c1}
${c1}⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀${c2}⣶⣶⣦⣄⡀⢀⣀⣤⣤⣄
${c1}⠀⠀⠀${c3}·${c1}⠀⠀⢸⣿⣿⣆⠀⠀⠀⠀⠀⠀⢀⣄${c2}⠙⢿⣿⣿⣿⣿⣿⣿⣿⠇
${c1}⠀⠀⠀${c3}|${c1}⠀⠀⢸⣿⣿⣿⡀⠀⠀⠀⠀⢀⣿⣿⡇⠀${c2}⠈⢹⡏⠉⠉⠁⠀⠀
${c1}⠀${c3}·─+─·${c1}⠸⣿⣿⣿⡇⠀⠀⠀⠀⢸⣿⣿⡇⠀${c2}⠀⢸⡇⠀⠀⠀⠀⠀
${c1}⠀⠀⠀${c3}|${c1}⠀⠀⠀⢿⣿⣿⣷⣶⣶⣶⣶⣾⣿⣿⡀⠀${c2}⠀⢸⠃⠀⠀⠀⠀⠀
${c1}⠀⠀⠀${c3}·${c1}⠀⠀⣠⣾⡿⠋⠉⠙⣿⣿⣿⣿⣿⠟⠛⢦⡀${c2}⣼⠀⠀⠀⠀⠀⠀
${c1}⠀⠀⠈⠐⢒⣾⣿⣿⣷⡀⠛⢀⣿⣿⣿⣭⣿⣀⠛⣸⣧${c2}⣿${c1}⠤⠤⠀⠀⠀⠀
${c1}⠀⠠⠤⠒⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿${c2}⣿${c1}⠤⠤⠀⠀⠀⠀
${c1}⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀
${c1}⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠉⠁⠀⠀⠀⠀⠈⠙⠻⣆⠀⠀⠀⠀⠀
${c1}⠀⠀⣾⣿⣿⣿⣿⣿⣿⡿⠋⢀⣠⣄⠀⠀⠶⠿⠦⠀⠰⠶⠹⣧⠀⠀⠀⠀
${c1}⠀⢸⣿⣿⣿⣿⣿⣿⣿⡇⠀⠚⠉⠉⠀⠀⠀⠀⠀⣀⡀⠀⢀⣇⠀⠀⠀⠀
${c1}⠀⢸⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠠⠾⠛⠂⠀⠘⠉⠉⠀⠉⢹⠀⠀⠀⠀
⠀
EOF
}

crop_mode="fit"

# unused
#bar_char_elapsed=""
#bar_char_total="󰧟"
